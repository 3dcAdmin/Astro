---
import { Markdown, Prism } from 'astro/components';
import BlogHead from '../../components/BlogHead.astro';
import BlogHeader from '../../components/BlogHeader.astro';
import BlogPost from '../../components/BlogPost.astro';
import BlockQuote from '../../components/BlockQuote.astro';
import GoogleAnalytics from '../../components/GoogleAnalytics.astro';
import Note from '../../components/Note.astro';
import Shell from '../../components/Shell.astro';

let title = 'Astro 0.18 Release';
let description = `Astro 0.18 is our biggest release since Astro launch. It includes a new responsive hydrator, named slots, global stylesheets, and two new renderers. Ready on to learn more on this release.`;
let publishDate = 'Tuesday, July 27 2021';
let author = 'matthew';
let heroImage = '/social.jpg';
let permalink = 'https://astro.build/blog/astro-0-18';
let lang = 'en';
---

<html lang={ lang ?? 'en' }>
  <head>
    <BlogHead title={title} description={description} permalink={permalink} />
    <style>
      img {
        max-width: 100%;
      }
    </style>
  </head>

  <body>
    <BlogHeader />
    <BlogPost title={title} author={author} heroImage={heroImage} publishDate={publishDate}>
        <Markdown>
          After the success of Astro's launch we spent some time fixing bugs and taking user feedback on what to tackle next. Now some of the features that people requested are starting to get released.
          
          Astro 0.18 is the culmination and is the biggest release to date. This post highlights only some of what it brings.

          ![Code example that shows off using the new client:media hydrator.](/assets/blog/astro-018/responsive-hydration.png)
          <!-- Saved from https://carbon.now.sh/16xchqPVdt5IEAY3Czg3 -->

          ## Responsive component hydration

          Astro uses [partial hydration](https://docs.astro.build/core-concepts/component-hydration), a technique to only include the client-side JavaScript for the parts of a page that are actually interactive. With Astro there were previously 3 strategies for partial hydration: hydrating on [page load](https://docs.astro.build/core-concepts/component-hydration#mycomponent-clientload-), when the CPU is [idle](https://docs.astro.build/core-concepts/component-hydration#mycomponent-clientidle-), or when the element is scrolled into [view](https://docs.astro.build/core-concepts/component-hydration#mycomponent-clientvisible-).

          When developing responsive sites you often have components that are only used on certain device sizes, like a mobile sidebar menu. Many sites will load their mobile-only code on all devices, wasting performance for users who don't ever see this UI.

          To solve that problem we've now added a 4th way to hydrate, using a **[CSS media query](https://docs.astro.build/core-concepts/component-hydration#mycomponent-clientmediaquery-)**. Add the `client:media` directive to a component and it will only hydrate once the media condition is met.

          This is all part of Astro's commitment to providing tools to minimize the amount of JavaScript you load.

          ![Using multiple slots to provide the head and body parts of a Layout component.](/assets/blog/astro-018/named-slots.png)
          <!-- https://carbon.now.sh/9UwJkMCezRIOhzac5VVp -->

          ## Named slots

          [Named slots](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots) are a standardized feature in shadow DOM and used in frameworks like [Vue](https://vuejs.org/v2/guide/components-slots.html#Named-Slots). In this release, Astro adds [named slots to Astro components](https://docs.astro.build/core-concepts/astro-components#slots), pages, and layouts.

          Named slots are particularly useful for layout components. Layout components are what we call components that provide common HTML for a page, such as commonly added CSS in the &lt;head&gt; and the page's skeleton content.

          Now, a Layout can specify slots for content to go into the "head" section, and some to go into the body's "content" section. The layout component defines its slots as part of its API. It can have as many or as few as you need!

          Named slots will allow for **more robust** and dynamic Astro components. This will especially be useful for distributing components as packages where components take more options and are less opinionated.

          ![Solid.js logo](/assets/blog/astro-018/solid-logo.png)

          ## Solid support

          [Solid](https://www.solidjs.com/) is a JSX-based reactive framework that compiles to efficient DOM manipulation. Before Astro was even public, the Solid team expressed interest in building a renderer. With the new [Solid renderer](https://github.com/snowpackjs/astro/tree/main/packages/renderers/renderer-solid), now you can use Solid as a first-class framework in your project.

          Even though Solid implements its own JSX compilation that differs from React and Preact, you're still able to use it side-by-side with any of those framework components. This is the promise of Astro, use all of your favorite framework(s)!

          ![Lit logo](/assets/blog/astro-018/lit-logo.svg)

          ## Lit support

          The ability to server render web components is finally arriving thanks to [Declarative Shadow DOM](https://web.dev/declarative-shadow-dom/), a new HTML feature that's now available in Chrome. [Lit](https://lit.dev/) has experimental support for server rendering and we've brought that into Astro via the new [Lit renderer](https://github.com/snowpackjs/astro/tree/main/packages/renderers/renderer-lit).

          This allows you to define a Lit element in a JavaScript file and then render it in Astro, just as you would a framework component like React or Vue. One major difference is that you use the custom element tag name, just as you would in HTML. When doing that you get:

          * Fully rendered custom elements!
          * Automatic inclusion of the declarative shadow DOM polyfill (for non-Chromium browsers).
          * Integration with Lit's hydration system.

          The Lit renderer is marked as experimental, but we're already excited to see that many popular libraries render correctly with it.  As other web component libraries adopt declarative shadow DOM and common APIs emerge for rendering, we hope to bring support to those libraries as well.


          ![Example showing using the style global tag to provide global CSS classes for the entire page.](/assets/blog/astro-018/style-global.png)

          ## &lt;style global&gt;

          Astro components and pages have &lt;style&gt; tags scoped by default. The new [global attribute](https://docs.astro.build/guides/styling#overview) on the style tag marks a block of styles to be applied globally, without scoping.

          For example in a page component you might want to style all of your heading elements (h1, h2, etc) a certain way regardless of whether they are contained within components or not. With &lt;style global&gt; you can do that a little easier.

          ![Image of docs.astro.build Getting Started page](/assets/blog/astro-018/docs-site.png)

          ## New docs site

          The docs site has been in development since Astro was launched and is now available at [docs.astro.build](https://docs.astro.build/).

          While improving the Astro docs weâ€™ve also been updating the docs template which we used ourselves. You can start your own documentation site with:

          <Shell code={`npm init astro --template docs`} />

          Huge thanks to the docs team which is one of the most active channels on [our Discord](https://astro.build/chat).

        </Markdown>
    </BlogPost>

    <GoogleAnalytics />
  </body>
</html>

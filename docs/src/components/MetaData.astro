---
import { site } from '../config.ts';
const { content = {}, canonicalURL } = Astro.props;
let formattedContentTitle = content.title ? `${content.title} ðŸš€ ${site.title}` : site.title;
---

<!-- OpenGraph Tags -->
<meta property="og:title" content={formattedContentTitle}/>
<meta property="og:type" content="article"/>
<meta property="og:url" content={canonicalURL}/>
<meta property="og:locale" content={content.ogLocale ? content.ogLocale : site.ogLocale}/>
<meta property="og:image" content={content?.image?.src ? content.image.src : site.image.src}/>
<meta property="og:image:alt" content={content?.image?.alt ? content.image.alt : site.image.alt}/>
<meta property="og:description" content={content.description ? content.description : site.description}/>
<meta property="og:site_name" content={site.title}/>
<!-- END OpenGraph Tags -->

<!-- Twitter Tags -->
<meta name="twitter:card" content="summary"/>
<meta name="twitter:site" content={site.twitter.site}/>
<meta name="twitter:creator" content={site.twitter.creator}/>
<meta name="twitter:title" content={formattedContentTitle}/>
<meta name="twitter:description" content={content.description ? content.description : site.description}/>
<meta name="twitter:image" content={content?.image?.src ? content.image.src : site.image.src}/>
<meta name="twitter:image:alt" content={content?.image?.alt ? content.image.alt : site.image.alt}/>
<!-- END Twitter Tags -->

<link rel="canonical" href={canonicalURL}/>

<!-- 
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense? 
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, there's a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->

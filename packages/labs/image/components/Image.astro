---
// @ts-ignore
import loader from 'virtual:image-loader';
import { getImage } from '../src';
import type { ImageMetadata, TransformOptions, OutputFormat } from '../src/types';

export interface LocalImageProps extends Omit<TransformOptions, 'src'> {
	src: ImageMetadata;	
}

export interface RemoteImageProps extends TransformOptions {
	src: string;
	format: OutputFormat;
	width: number;
	height: number;
}

export type Props = LocalImageProps | RemoteImageProps;

function isLocalImage(props: Props): props is LocalImageProps {
	// vite-plugin-astro-image resolves ESM imported images
	// to a metadata object
	return typeof props.src !== 'string';
}

function resolveProps(props: Props): TransformOptions {
	if (!isLocalImage(props)) {
		return props;
	}

	let { width, height, aspectRatio, format } = props;
	const { src, ...metadata } = props.src;

	if (!width && !height) {
		width = metadata.width;
		height = metadata.height;
	} else if (height || width) {
		aspectRatio = aspectRatio || metadata.width / metadata.height;
	}
	
	return {
		width,
		height,
		aspectRatio,
		src,
		format,
	}
}

function calculateSize(props: TransformOptions): TransformOptions {
	// keep width & height as provided
	if (props.width && props.height) {
		return props;
	}

	if (!props.width && !props.height) {
		throw new Error(`"width" and "height" cannot both be undefined`);
	}

	if (!props.aspectRatio) {
		throw new Error(`"aspectRatio" must be included if only "${props.width ? "width": "height"}" is provided`)
	}

	let aspectRatio: number;

	// parse aspect ratio strings, if required (ex: "16:9")
	if (typeof props.aspectRatio === 'number') {
		aspectRatio = props.aspectRatio;
	} else {
		const [width, height] = props.aspectRatio.split(':');
		aspectRatio = parseInt(width) / parseInt(height);
	}

	if (props.width) {
	// only width was provided, calculate height
		return {
			...props,
			width: props.width,
			height: props.width / aspectRatio
		};
	} else if (props.height) {
	// only height was provided, calculate width
		return {
			...props,
		width: props.height * aspectRatio,
		height: props.height
		}
	}

	return props;
}

const props = Astro.props as Props;
const imageProps = calculateSize(resolveProps(props));

const attrs = await getImage(loader, imageProps);
---

<img {...attrs} />

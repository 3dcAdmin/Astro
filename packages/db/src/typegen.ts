import { existsSync } from 'node:fs';
import { mkdir, writeFile } from 'node:fs/promises';
import type { DBCollection, DBCollections, FieldType } from './types.js';
import { DB_TYPES_FILE, DRIZZLE_MOD_IMPORT, INTERNAL_MOD_IMPORT } from './consts.js';

export async function typegen({ collections, root }: { collections: DBCollections; root: URL }) {
	const content = `// This file is generated by \`studio sync\`
declare module 'astro:db' {
	export const db: import(${INTERNAL_MOD_IMPORT}).SqliteDB;
	export * from ${DRIZZLE_MOD_IMPORT}

${Object.entries(collections)
	.map(([name, collection]) => generateTableType(name, collection))
	.join('\n')}
}
`;

	const dotAstroDir = new URL('.astro/', root);

	if (!existsSync(dotAstroDir)) {
		await mkdir(dotAstroDir);
	}

	await writeFile(new URL(DB_TYPES_FILE, dotAstroDir), content);
}

function generateTableType(name: string, collection: DBCollection): string {
	let tableType = `	export const ${name}: import(${INTERNAL_MOD_IMPORT}).AstroTable<{
		name: ${JSON.stringify(name)};
		columns: {
			id: import(${INTERNAL_MOD_IMPORT}).AstroId<{
				tableName: ${JSON.stringify(name)};
			}>;`;

	for (const [fieldName, field] of Object.entries(collection.fields)) {
		const drizzleInterface = schemaTypeToDrizzleInterface(field.type);
		tableType += `
			${fieldName}: import(${INTERNAL_MOD_IMPORT}).${drizzleInterface}<{
				tableName: ${JSON.stringify(name)};
				name: ${JSON.stringify(fieldName)};
				notNull: ${field.optional ? 'false' : 'true'};
				hasDefault: ${typeof field.default !== 'undefined' ? 'true' : 'false'};
			}>;`;
	}
	tableType += `
		};
	}>;`;
	return tableType;
}

function schemaTypeToDrizzleInterface(type: FieldType) {
	switch (type) {
		case 'text':
			return 'AstroText';
		case 'number':
			return 'AstroNumber';
		case 'boolean':
			return 'AstroBoolean';
		case 'date':
			return 'AstroDate';
		case 'json':
			return 'AstroJson';
	}
}

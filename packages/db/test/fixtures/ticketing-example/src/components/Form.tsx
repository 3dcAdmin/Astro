// Generated by simple:form

import { type ComponentProps, createContext } from 'preact';
import { useContext, useState } from 'preact/hooks';
import { navigate } from 'astro:transitions/client';
import {
	type ColumnErrors,
	type FormState,
	type FormValidator,
	formNameInputProps,
	getInitialFormState,
	toSetValidationErrors,
	toTrackAstroSubmitStatus,
	toValidateColumn,
	validateForm,
} from 'simple:form';

export function useCreateFormContext(validator: FormValidator, columnErrors?: ColumnErrors) {
	const initial = getInitialFormState({ validator, columnErrors });
	const [formState, setFormState] = useState<FormState>(initial);
	return {
		value: formState,
		set: setFormState,
		setValidationErrors: toSetValidationErrors(setFormState),
		validateColumn: toValidateColumn(setFormState),
		trackAstroSubmitStatus: toTrackAstroSubmitStatus(setFormState),
	};
}

export function useFormContext() {
	const formContext = useContext(FormContext);
	if (!formContext) {
		throw new Error(
			'Form context not found. `useFormContext()` should only be called from children of a <Form> component.'
		);
	}
	return formContext;
}

type FormContextType = ReturnType<typeof useCreateFormContext>;

const FormContext = createContext<FormContextType | undefined>(undefined);

export function Form({
	children,
	validator,
	context,
	columnErrors,
	name,
	...formProps
}: {
	validator: FormValidator;
	context?: FormContextType;
	columnErrors?: ColumnErrors;
} & Omit<ComponentProps<'form'>, 'method' | 'onSubmit'>) {
	const formContext = context ?? useCreateFormContext(validator, columnErrors);

	return (
		<FormContext.Provider value={formContext}>
			<form
				{...formProps}
				method="POST"
				onSubmit={async (e) => {
					e.preventDefault();
					e.stopPropagation();
					const formData = new FormData(e.currentTarget);
					formContext.set((formState) => ({
						...formState,
						isSubmitPending: true,
						submitStatus: 'validating',
					}));
					const parsed = await validateForm({ formData, validator });
					if (parsed.data) {
						const action =
							typeof formProps.action === 'string'
								? formProps.action
								: // Check for Preact signals
									formProps.action?.value ?? '';
						navigate(action, { formData });
						return formContext.trackAstroSubmitStatus();
					}

					formContext.setValidationErrors(parsed.columnErrors);
				}}
			>
				{name ? <input {...formNameInputProps} value={name} /> : null}
				{children}
			</form>
		</FormContext.Provider>
	);
}

export function Input({ onInput, ...inputProps }: ComponentProps<'input'> & { name: string }) {
	const formContext = useFormContext();
	const columnState = formContext.value.columns[inputProps.name];
	if (!columnState) {
		throw new Error(
			`Input "${inputProps.name}" not found in form. Did you use the <Form> component?`
		);
	}

	const { hasErroredOnce, validationErrors, validator } = columnState;
	return (
		<>
			<input
				onBlur={async (e) => {
					const value = e.currentTarget.value;
					if (value === '') return;
					formContext.validateColumn(inputProps.name, value, validator);
				}}
				onInput={async (e) => {
					onInput?.(e);

					if (!hasErroredOnce) return;
					const value = e.currentTarget.value;
					formContext.validateColumn(inputProps.name, value, validator);
				}}
				{...inputProps}
			/>
			{validationErrors?.map((e) => <p key={e}>{e}</p>)}
		</>
	);
}

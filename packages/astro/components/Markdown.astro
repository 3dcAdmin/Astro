---
import { renderMarkdown } from '@astrojs/markdown-support';

export interface Props {
  content?: string;
}

// Internal props that should not be part of the external interface.
interface InternalProps extends Props {
  $scope: string;
}

const __TopLevelAstro = {
  site: new URL("http://localhost:3000"),
  fetchContent: (globResult) => fetchContent(globResult, import.meta.url),
  resolve(...segments) {
    return segments.reduce(
      (url, segment) => new URL(segment, url),
      new URL("http://localhost:3000/packages/astro/components/Markdown.astro")
    ).pathname
  },
};
const Astro = __TopLevelAstro;

export interface Props {
  content?: string;
}

// Internal props that should not be part of the external interface.
interface InternalProps extends Props {
  $scope: string;
}

const { content, $scope } = Astro.props as InternalProps;
let html = null;




// `__render()`: Render the contents of the Astro module.
import { h, Fragment } from 'astro/runtime/h.js';
const __astroInternal = Symbol('astro.internal');
const __astroContext = Symbol.for('astro.context');
async function __render(props, ...children) {
  const Astro = Object.create(__TopLevelAstro, {
    props: {
      value: props,
      enumerable: true
    },
    pageCSS: {
      value: (props[__astroContext] && props[__astroContext].pageCSS) || [],
      enumerable: true
    },
    isPage: {
      value: (props[__astroInternal] && props[__astroInternal].isPage) || false,
      enumerable: true
    },
    request: {
      value: (props[__astroContext] && props[__astroContext].request) || {},
      enumerable: true
    },
  });

  const {
  content,
  $scope
} = Astro.props;
let html = null;

// This flow is only triggered if a user passes `<Markdown content={content} />`
if (content) {
  const { content: htmlContent } = await renderMarkdown(content, {
    mode: 'md',
    $: {
      scopedClassName: $scope
    }
  });
  html = htmlContent;
}

/*
  If we have rendered `html` for `content`, render that
  Otherwise, just render the slotted content
*/
---
{html ? html : <slot />}

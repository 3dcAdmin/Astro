---
type Fallback = 'none' | 'animate' | 'swap';

export interface Props {
	fallback?: Fallback;
}

const { fallback = 'animate' } = Astro.props;
---

<style is:global>
	/* Route announcer */
	.astro-route-announcer {
		position: absolute;
		left: 0;
		top: 0;
		clip: rect(0 0 0 0);
		clip-path: inset(50%);
		overflow: hidden;
		white-space: nowrap;
		width: 1px;
		height: 1px;
	}
</style>
<meta name="astro-view-transitions-enabled" content="true" />
<meta name="astro-view-transitions-fallback" content={fallback} />
<script>
	import { supportsViewTransitions, navigate } from 'astro:transitions/client';
	// NOTE: import from `astro/prefetch` as `astro:prefetch` requires the `prefetch` config to be enabled
	import { init } from 'astro/prefetch';
	export type Fallback = 'none' | 'animate' | 'swap';

	function getFallback(): Fallback {
		const el = document.querySelector('[name="astro-view-transitions-fallback"]');
		if (el) {
			return el.getAttribute('content') as Fallback;
		}
		return 'animate';
	}

	if (supportsViewTransitions || getFallback() !== 'none') {
		document.addEventListener('click', (ev) => {
			let link = ev.target;
			if (link instanceof Element && link.tagName !== 'A') {
				link = link.closest('a');
			}
			// This check verifies that the click is happening on an anchor
			// that is going to another page within the same origin. Basically it determines
			// same-origin navigation, but omits special key combos for new tabs, etc.
			if (
				!link ||
				!(link instanceof HTMLAnchorElement) ||
				link.dataset.astroReload !== undefined ||
				link.hasAttribute('download') ||
				!link.href ||
				(link.target && link.target !== '_self') ||
				link.origin !== location.origin ||
				ev.button !== 0 || // left clicks only
				ev.metaKey || // new tab (mac)
				ev.ctrlKey || // new tab (windows)
				ev.altKey || // download
				ev.shiftKey || // new window
				ev.defaultPrevented
			) {
				// No page transitions in these cases,
				// Let the browser standard action handle this
				return;
			}
			ev.preventDefault();
			navigate(link.href, {
				history: link.dataset.astroHistory === 'replace' ? 'replace' : 'auto',
			});
		});

		// @ts-expect-error injected by vite-plugin-transitions for treeshaking
		if (!__PREFETCH_DISABLED__) {
			init({ prefetchAll: true });
		}
	}
</script>

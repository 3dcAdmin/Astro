---
import { type LocalImageProps, type RemoteImageProps, getImage, imageConfig } from 'astro:assets';
import { AstroError, AstroErrorData } from '../dist/core/errors/index.js';
import type { HTMLAttributes } from '../types';

// The TypeScript diagnostic for JSX props uses the last member of the union to suggest props, so it would be better for
// LocalImageProps to be last. Unfortunately, when we do this the error messages that remote images get are complete nonsense
// Not 100% sure how to fix this, seems to be a TypeScript issue. Unfortunate.
type Props = LocalImageProps | RemoteImageProps;

const { class: className, ...props } = Astro.props;

if (props.alt === undefined || props.alt === null) {
	throw new AstroError(AstroErrorData.ImageMissingAlt);
}

// As a convenience, allow width and height to be string with a number in them, to match HTML's native `img`.
if (typeof props.width === 'string') {
	props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
	props.height = parseInt(props.height);
}

const image = await getImage(props);

const additionalAttributes: HTMLAttributes<'img'> = {};
if (image.srcSet.values.length > 0) {
	additionalAttributes.srcset = image.srcSet.attribute;
}

if (import.meta.env.DEV) {
	additionalAttributes['data-image-component'] = 'true';
}

const { experimentalResponsiveImages, layout } = imageConfig;

const cssFitValues = ['fill', 'contain', 'cover', 'scale-down'];
const objectFit = props.objectFit ?? 'cover';
---

<img
	src={image.src}
	{...additionalAttributes}
	{...image.attributes}
	class:list={[
		experimentalResponsiveImages && (props.layout ?? layout),
		experimentalResponsiveImages && cssFitValues.includes(objectFit) && `fit-${objectFit}`,
		className,
	]}
/>

<style
	define:vars={{
		w: image.attributes.width ?? props.width ?? image.options.width,
		h: image.attributes.height ?? props.height ?? image.options.height,
	}}
>
	.responsive {
		max-width: calc(var(--w) * 1px);
		max-height: calc(var(--h) * 1px);
		aspect-ratio: var(--w) / var(--h);
		width: 100%;
		height: auto;
	}

	.full-width {
		width: 100%;
		height: auto;
		aspect-ratio: var(--w) / var(--h);
	}

	.fixed {
		width: calc(var(--w) * 1px);
		height: calc(var(--h) * 1px);
	}

	.fit-cover {
		object-fit: cover;
	}

	.fit-contain,
	.fit-scale-down {
		object-fit: scale-down;
	}

	.fit-fill {
		object-fit: fill;
	}
</style>

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Middleware with handler file 1`] = `
"globalThis.process = {
	argv: [],
	env: Deno.env.toObject(),
};

// test/functions/fixtures/middleware-with-handler-file/src/netlify-edge-middleware.js
function netlify_edge_middleware_default({ request, context }) {
  return {
    title: \\"Hello world\\"
  };
}

// test/functions/fixtures/middleware-with-handler-file/.netlify/functions-internal/middleware2.mjs
var onRequest = (context, next) => {
  context.locals.title = \\"Middleware\\";
  return next();
};

// <stdin>
import { createContext, trySerializeLocals } from \\"astro/middleware\\";
async function middleware(request, context) {
  const url = new URL(request.url);
  const ctx = createContext({
    request,
    params: {}
  });
  ctx.locals = netlify_edge_middleware_default({ request, context });
  const next = async () => {
    const response = await fetch(url, {
      headers: {
        \\"x-astro-locals\\": trySerializeLocals(ctx.locals)
      }
    });
    return response;
  };
  return onRequest(ctx, next);
}
export {
  middleware as default
};
"
`;

exports[`Middleware with handler file 2`] = `
"globalThis.process = {
	argv: [],
	env: Deno.env.toObject(),
};

// test/functions/fixtures/middleware-without-handler-file/.netlify/functions-internal/middleware2.mjs
var onRequest = (context, next) => {
  context.locals.title = \\"Middleware\\";
  return next();
};

// <stdin>
import { createContext, trySerializeLocals } from \\"astro/middleware\\";
async function middleware(request, context) {
  const url = new URL(request.url);
  const ctx = createContext({
    request,
    params: {}
  });
  ctx.locals = {};
  const next = async () => {
    const response = await fetch(url, {
      headers: {
        \\"x-astro-locals\\": trySerializeLocals(ctx.locals)
      }
    });
    return response;
  };
  return onRequest(ctx, next);
}
export {
  middleware as default
};
"
`;

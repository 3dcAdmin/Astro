---
import Image from './Image.astro';
// @ts-ignore
import loader from 'virtual:image-loader';
import { lookup } from 'mrmime';
import { getImage } from '../src/index.js';
import type { ImageMetadata, OutputFormat } from '../src/types.js';

export interface Props extends Partial<HTMLPictureElement> {
	src: ImageMetadata;
	sizes: HTMLImageElement['sizes'];
	widths: number[];
	formats?: OutputFormat[];
}

const { src, sizes, widths, formats = ['avif', 'webp', 'jpeg'] } = Astro.props as Props;

if (widths.length <= 0) {
	throw new Error('At least one width must be provided for the <Picture>');
}

const aspectRatio = src.width / src.height;

async function getSource(format: OutputFormat) {
	const imgs = await Promise.all(widths.map(async (width) => {
		const img = await getImage(loader, { src: src.src, format, width, height: Math.round(width / aspectRatio) });
		return `${img.src} ${width}w`;
	}))

	return {
		type: lookup(format) || format,
		srcset: imgs.join(',')
	};
}

const sources = await Promise.all(formats.map(format => getSource(format)));

const width = widths.sort().shift()!;
const height = Math.round(width / aspectRatio);
---

<picture>
	{sources.map(attrs => (
	<source {...attrs} {sizes}>))}
	<Image {sizes} {src} {width} {height} />
</picture>

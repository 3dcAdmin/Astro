import type { AstroConfig } from 'astro';
import { existsSync } from 'node:fs';
import { mkdir, writeFile } from 'node:fs/promises';
import { getAstroStudioStorageUrl } from './utils.js';
import { STORAGE_CODE_FILE, STORAGE_TYPES_FILE } from './consts.js';
import { getProjectIdFromFile, getSessionIdFromFile, safeFetch } from '@astrojs/studio';

export async function codegen(astroConfig: Pick<AstroConfig, 'root'>) {
	await codegenInternal({ root: astroConfig.root });
}

async function codegenInternal({ root }: { root: URL }) {
	const dotAstroDir = new URL('.astro/', root);

	const images = await storageRequest('image');
	const all = await storageRequest('all');

	const code = `
		// This file is auto-generated by Astro Studio. Do not modify this file directly.
		export const images = ${JSON.stringify(images)};
		export const all = ${JSON.stringify(all)};

		export type Image = keyof typeof images | string & {};
		export type File = keyof typeof all | string & {};
	`;

	const types = `
	// This file is auto-generated by Astro Studio. Do not modify this file directly.
	declare module 'astro:storage' {
		export function getFile(name: import("./${STORAGE_CODE_FILE}").File);
		export function getStudioImage(name: import("./${STORAGE_CODE_FILE}").Image);
	}
	`

	if (!existsSync(dotAstroDir)) {
		await mkdir(dotAstroDir);
	}

	await writeFile(new URL(STORAGE_CODE_FILE, dotAstroDir), code);
	await writeFile(new URL(STORAGE_TYPES_FILE, dotAstroDir), types);
}

async function storageRequest(fileKind: 'all' | 'image' = 'all') {
	const projectId = await getProjectIdFromFile();
	const linkUrl = getAstroStudioStorageUrl();
	const sessionToken = await getSessionIdFromFile();

	const response = await safeFetch(
    linkUrl,
    {
        method: 'POST',
        headers: {
            Authorization: `Bearer ${sessionToken}`,
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ projectId, fileKind }),
    },
    (res) => {
        // Unauthorized
        if (res.status === 401) {
           }
    }
	);

	return groupDataByName((await response.json()).data);
}

function groupDataByName(data: any) {
	const grouped: Record<string, any> = {};
	for (const item of data) {
		grouped[item.name] = item;
	}

	return grouped;
}
